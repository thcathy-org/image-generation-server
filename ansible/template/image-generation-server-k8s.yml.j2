######## image-gneration-server (start)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ app_name }}
  labels:
    app: {{ app_name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ app_name }}
  template:
    metadata:
      labels:
        app: {{ app_name }}
    spec:
      containers:
      - name: {{ app_name }}
        image: thcathy/{{ app_name }}:{{ docker_image_tag }}
        env:
        - name: ApiKeyMiddlewareOptions__ApiKeys
          valueFrom:
            secretKeyRef:
              name: {{ app_name }}-secrets
              key: ApiKeyMiddlewareOptions__ApiKeys
        - name: ReplicateAiServiceOptions__Token
          valueFrom:
            secretKeyRef:
              name: {{ app_name }}-secrets
              key: ReplicateAiServiceOptions__Token
        - name: GoogleApplicationCredentials
          value: /etc/secret-volume/GOOGLE_APPLICATION_CREDENTIALS_JSON
        - name: DOTNET_ENVIRONMENT
          value: {{ dotnet_env }}
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
          readOnly: true
        - name: data-volume
          mountPath: /data
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 30
          timeoutSeconds: 1
      volumes:
      - name: secret-volume
        secret:
          secretName: {{ app_name }}-secrets
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ app_name }}-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ app_name }}-service
spec:
  selector:
    app: {{ app_name }}
  ports:
  - name: http
    port: 80
    targetPort: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ app_name }}-prefix-remover
spec:
  stripPrefix:
    prefixes:
    - /{{ url_base_path }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ app_name }}-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: {{ namespace }}-{{ app_name }}-prefix-remover@kubernetescrd
spec:
  tls:
  - secretName: {{ app_name }}-tls
    hosts:
      - {{ inventory_hostname }}
  rules:
  - host: {{ inventory_hostname }}
    http:
      paths:
      - path: /{{ url_base_path }}
        pathType: Prefix
        backend:
          service:
            name: {{ app_name }}-service
            port:
              name: http
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ app_name }}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 0.5Gi
---
######## image-gneration-server (end)
######## angular-admin (start)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: angular-admin
  labels:
    app: angular-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: angular-admin
  template:
    metadata:
      labels:
        app: angular-admin
    spec:
      containers:
      - name: angular-admin
        image: thcathy/{{ url_base_path }}-admin:{{ docker_image_tag }}
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          timeoutSeconds: 1
---
apiVersion: v1
kind: Service
metadata:
  name: angular-admin-service
spec:
  selector:
    app: angular-admin
  ports:
  - name: http
    port: 80
    targetPort: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: angular-admin-prefix-remover
spec:
  stripPrefix:
    prefixes:
    - /{{ url_base_path }}-admin
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: angular-admin-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: {{ namespace }}-angular-admin-prefix-remover@kubernetescrd
spec:
  tls:
  - secretName: angular-admin-tls
    hosts:
      - {{ inventory_hostname }}
  rules:
  - host: {{ inventory_hostname }}
    http:
      paths:
      - path: /{{ url_base_path }}-admin
        pathType: Prefix
        backend:
          service:
            name: angular-admin-service
            port:
              name: http
---
######## angular-admin (end)