name: build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  get-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: kzrnm/get-net-sdk-project-versions-action@v1
        id: get-version
        with:
          proj-path: ImageGenerationServer/ImageGenerationServer.csproj
      - name: Set docker image tag env variable
        run: |
          echo "DOCKER_IMAGE_TAG=${{ steps.get-version.outputs.version }}.${{ github.run_number }}" >> $GITHUB_ENV
    outputs:
      docker_image_tag: ${{ env.DOCKER_IMAGE_TAG }}
  docker-build-server:
    runs-on: ubuntu-latest
    needs: [build-test, get-version]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: docker/build-push-action@v3
      with:
        push: true
        context: ./ImageGenerationServer
        file: ImageGenerationServer/Dockerfile
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/image-generation-server:latest,${{ secrets.DOCKERHUB_USERNAME }}/image-generation-server:${{ needs.get-version.outputs.docker_image_tag }}
        platforms: linux/arm64,linux/amd64
  docker-build-admin:
    strategy:
      matrix:
        image_name: [ image-generation-server-uat-admin, image-generation-server-admin ]
    runs-on: ubuntu-latest
    needs: [ build-test, get-version]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: angular-admin/package-lock.json
      - name: npm build
        working-directory: ./angular-admin
        run: |
          npm ci --legacy-peer-deps
          npm run build --production -- --base-href=${{ matrix.image_name }}
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          push: true
          context: ./angular-admin
          file: angular-admin/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:latest,${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:${{ needs.get-version.outputs.docker_image_tag }}
          platforms: linux/arm64,linux/amd64
  deploy-k8s-uat:
    runs-on: ubuntu-latest
    needs: [get-version, docker-build-server, docker-build-admin]
    steps:
      - uses: actions/checkout@v3
      - name: Run ansible playbook to deploy and verify k8s UAT
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy-k8s.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          vault_password: ${{ secrets.VAULT_PASSWORD }}
          options: |
            --inventory ansible/inventory_uat
            --limit uat
            -e docker_image_tag=${{ needs.get-version.outputs.docker_image_tag }}
            -e APIKEYMIDDLEWAREOPTIONS__APIKEYS=${{ secrets.APIKEYMIDDLEWAREOPTIONS__APIKEYS }} 
            -e ReplicateAiServiceOptions__Token=${{ secrets.REPLICATEAISERVICEOPTIONS__TOKEN }} 
            -e GOOGLE_APPLICATION_CREDENTIALS_JSON=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
  deploy-k8s-prod:
    runs-on: ubuntu-latest
    needs: [get-version, deploy-k8s-uat] 
    steps:
      - uses: actions/checkout@v3
      - name: Run ansible playbook to deploy and verify k8s PROD
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy-k8s.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          vault_password: ${{ secrets.VAULT_PASSWORD }}
          options: |
            --inventory ansible/inventory_prod
            --limit prod
            --skip-tags verify-uat
            -e docker_image_tag=${{ needs.get-version.outputs.docker_image_tag }}
            -e APIKEYMIDDLEWAREOPTIONS__APIKEYS=${{ secrets.APIKEYMIDDLEWAREOPTIONS__APIKEYS }} 
            -e ReplicateAiServiceOptions__Token=${{ secrets.REPLICATEAISERVICEOPTIONS__TOKEN }} 
            -e GOOGLE_APPLICATION_CREDENTIALS_JSON=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}